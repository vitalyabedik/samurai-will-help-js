//============================== Лексическое окружение - LE (Lexical Environment) ================================
// Что такое лексическое окружение?



//============================== Глобальный scope (globalLE) ==========================================



//============================== Scope в блоках кода ==========================================



//============================== Scope в функциях ==========================================



//============================== [[Environment]] ==========================================



//============================== Пример 1 ==========================================

// !!!----------------------------------------------------!!!
// const name = 'Alex'
//
// const foo = () => {
//     const hello = 'Hello'
//     console.log(hello + ' ' + name)
// }
// !!!----------------------------------------------------!!!



//============================== Пример 2 ==========================================

// !!!----------------------------------------------------!!!
// const name = 'Alex'
//
// const func1 = () => {
//     const hello = 'Hello'
//     console.log(hello + ' ' + name)
//
//     function func2(age) {
//         console.log(`${hello} ${name} ${age}`)
//     }
//
//     func2(23)
// }
//
// func1()
// !!!----------------------------------------------------!!!


//============================== Пример 3 ==========================================
// !!!----------------------------------------------------!!!
// const name = 'Alex'
//
// const func1 = () => {
//     const hello = 'Hello'
//     console.log(hello + ' ' + name)
//
//     function func2(age) {
//         console.log(`${hello} ${name} ${age}`)
//     }
//
//     func2(23)
// }
//
// func1()

// const name = 'Vitalya'
// !!!----------------------------------------------------!!!


//============================== Пример 4 ==========================================
// let phrase = "Hello";
//
// if (true) {
//     let user = "John";
//
//     function sayHi() {
//         alert(${phrase}, ${user});
//     }
// }
//
// sayHi();

//=============================Замыкание (Closures)==================================



//=============================Пример 1==================================
// !!!----------------------------------------------------!!!
// const counterCreator = () => {
//    let count = 0
//
//     return () => {
//         console.log(++count)
//     }
// }
//
// const counter = counterCreator()
// counter()
// counter()
// counter()
// !!!----------------------------------------------------!!!


//=============================Пример 2==================================

// !!!----------------------------------------------------!!!
// const counterCreator = () => {
//    let count = 0
//
//     return () => {
//         console.log(++count)
//     }
// }
//
// const counter1 = counterCreator()
// const counter2 = counterCreator()

// counter1()
// counter2()
// counter1()
// counter2()
// !!!----------------------------------------------------!!!
//  globalLE -> {counter1: Function, counter2: Function,} -> null


//=============================!!!Доп задачи!!!==================================

//=============================Задача 1==================================
// function Counter() {
//   let count = 0;
//
//   this.up = function() {
//     return ++count;
//   };
//   this.down = function() {
//     return --count;
//   };
// }
//
// let counter = new Counter();
//
// alert( counter.up() ); // ?
// alert( counter.up() ); // ?
// alert( counter.down() ); // ?




//=============================Задача 2*** ==================================
// function createIncrement() {
//     let count = 0;
//     function increment() {
//         count++;
//     }
//     let message = Count is ${count};
//     function  log() {
//         // let message = Count is ${count};
//         console.log(message)
//     }
//
//     return [increment, log];
// }
//
//
// const [increment, log] = createIncrement();
// increment();
// increment();
// increment();
// log();


